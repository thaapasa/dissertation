Perinteisesti tietokantasovellusten tietokantaan tekemät päivitykset korvaavat tietokannan tilan uudella, jolloin aiempaa tilaa eli versiota ei enää ole olemassa. Nykyisin tietokantasovelluksilla haetaan kuitenkin myös aiempien versioiden monikoita, mikä tulee ottaa huomioon tietokantojen hakemistorakenteiden suunnittelussa. Becker ja kumppanit ovat kehittäneet moniversio-B-puun (multiversion B-tree, MVBT), joka on eräs optimaalinen moniversiohakemistorakenne. Optimaalisuus tarkoittaa tässä sitä, että kaikki operaatiot ovat aina yhtä tehokkaita kuin vastaavassa yhden version hakemistorakenteessa. MVBT-rakenteen rajoitteena on kuitenkin se, että siinä yksi versio voi sisältää vain yhden päivitysoperaation, kun taas transaktiomallissa yksi transaktio voi tehdä monta päivitystä. Toinen rajoite rakenteessa on se, että päivityksiä ei voi peruuttaa.

Väitöskirjassa laajennetaan MVBT-rakennetta siten, että yksi transaktio voi päivittää useampaa avainta ja transaktiot voidaan peruuttaa. Laajennetussa transaktionaalisessa MVBT-rakenteessa (transactional MVBT, TMVBT) voidaan yhtä päivitystransaktiota suorittaa rinnakkain usean lukutransaktion kanssa. Hakemistorakenne on optimaalinen kaikissa tilanteissa, myös poisto-operaatioiden jälkeen.

TMVBT-rakennetta ei voi sellaisenaan käyttää tilanteissa, joissa tietokantasovelluksessa täytyy suorittaa rinnakkain useita päivitystransaktiota. Näitä tilanteita varten väitöskirjassa esitellään rinnakkainen MVBT-rakenne (concurrent MVBT, CMVBT), joka koostuu TMVBT-rakenteesta sekä sen rinnalla toimivasta keskusmuistissa pidettävästä versioidusta B-puusta (VBT), johon aktiivisten transaktioiden muutokset tallennetaan transaktioiden suorituksen ajaksi. Kun transaktiot sitoutuvat, muutokset siirretään versioidusta B-puusta TMVBT-rakenteeseen. CMVBT toimii yleisten rinnakkaisuudenhallinta-algoritmien kanssa ja sen elvytysalgoritmi perustuu yleisesti käytettyyn ARIES-elvytysalgoritmiin.

Väitöskirjassa todistetaan, että päähakemistorakenteena toimiva TMVBT on optimaalinen. Lisäksi osoitetaan kokeellisesti, että CMVBT-rakenne on yhtä tehokas kuin Lometin ja Salzbergin TSB-puu (time-split B-tree) yleisissä kyselyissä ja päivityksissä, sekä tehokkaampi avainvälihauissa, kun tietokannasta on poistettu monikoita. Tehokkuusero johtuu siitä, että TSB-puu ei yhdistä tietokantasivuja eikä täten ole optimaalinen.
